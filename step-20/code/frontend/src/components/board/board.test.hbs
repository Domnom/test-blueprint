import React from 'react';
import { checkProps } from '../../common/utils/test-helpers';
import { render, RenderResult } from '@testing-library/react';

import { generatePosition } from '../../common/utils/lexicographic.util';

import Board from './board.component';

describe("BoardComponent", () => {

    describe("Checking prop types", () => {

        it ("Should not throw any warnings", () => {

            const expectedProps = {
                name : "Board name",
                listsData : [
                    {
                        id : 1,
                        position: 'n',
                        name : "List 1",
                        cards : [
                            {
                                id : 1,
{{partial_1}}                                name : "Card 1"
                            },
                            {
{{partial_2}}                                name : "Card 2"
                            }
                        ]
                    }
                ] 
            }

            const propErrors = checkProps(Board, expectedProps);

            expect(propErrors).toBeUndefined();

        })
        
        it ("Should throw errors when there are missing required props", () => {

            const propErrors = checkProps(Board, {});

            expect(propErrors).toBeDefined();

        })

    });

    describe("Render", () => {

        it ("Should render without errors with no listsData", () => {
            const renderedComponent: RenderResult = render(<Board name="Board name" />);

            const listContainerDiv: HTMLElement = renderedComponent.getByTestId('board.cardListContainer');

            expect(listContainerDiv.childElementCount).toBe(0);
        })

        it ("Should render without errors with valid listsData", () => {
            
            const listsData: any = [
                {
                    id : 1,
                    position: 'n',
                    name : "List 1",
                    cards : [
                        {
                            id : 1,
{{partial_3}}                            name : "Card 1"
                        }
                    ]
                },
                {
                    id : 2,
                    position: generatePosition('n'),
                    name : "List 2"
                }
            ]

            const renderedComponent: RenderResult = render(<Board name="Board name" listsData={listsData} />);

            renderedComponent.getByText(/list 1/i);
            renderedComponent.getByText(/list 2/i);
            renderedComponent.getByText(/card 1/i);

        })

        it ("Should render without errors with invalid listsData", () => {

            const listsData: any = [
                {
                    invalid : "List 1",
                    cards : [
                        {
                            id : 1,
{{partial_4}}                            name : "Card 1"
                        }
                    ]
                },
                {
                    id : 2,
                    random : "List 2"
                }
            ]

            const renderedComponent: RenderResult = render(<Board name="Board name" listsData={listsData} />);

            const list1Div = renderedComponent.queryByText(listsData[0].invalid);
            const list2Div = renderedComponent.queryByText(listsData[1].random);

            expect(list1Div).toBeNull();
            expect(list2Div).toBeNull();
        })

        it ("Should render with a mixture of valid and invalid listsData", () => {
            const listsData: any = [
                {
                    id : 1,
                    position: 'n',
                    name : "List 1",
                    cardsRandom : [
                        {
                            id : 1,
{{partial_5}}                            name : "Card 1"
                        }
                    ]
                },
                {
                    id : 2,
                    invalid : "List 2",
                    cards : [
                        {
                            id : 2,
{{partial_6}}                            name : "Card 2"
                        }
                    ]
                }
            ]

            const renderedComponent: RenderResult = render(<Board name="Board name" listsData={listsData} />);

            renderedComponent.getByText(/list 1/i);
            const card1Div = renderedComponent.queryByText(/card 1/i);

            const list2Div = renderedComponent.queryByText(/list 2/i);
            
            expect(card1Div).toBeNull();
            expect(list2Div).toBeNull();
        })

    })

});