/** 
 * @class CardList
 * @namespace components 
 * @description 
 * @author Playbook
 */
import React, { Fragment } from 'react';
import PropTypes from 'prop-types';
{{partial_1}}
/**
 * @requires Styles
 */
import './card-list.styles.css';


/**
 * @requires Components
 */
import Card from '../card/card.component';

/**
 * @required Types
 */
type TCardData = {
    id: number;
    name : string;
}

/**
 * @param {TProperty} TProperty 
 */
type TProperty = {
{{partial_2}}    name : string;
    cardsData? : TCardData[]
}

/**
 * @param {TState} TState
 */
type TState = {

}

/**
 * CardList
 *
 * @class CardList
 * @extends {React.Component<TProperty, TState>}
 */
class CardList extends React.Component<TProperty, TState> {

    /**
     * @param {PropTypes} propTypes - property types to check at run time 
     */
    static propTypes = {
{{partial_3}}        name : PropTypes.string.isRequired,
        cardsData : PropTypes.arrayOf(Object)
    }

    /**
     * Render the CardList
     *
     * @returns {JSX} component 
     * @memberof CardList
     */
    render() {

        /**
         * @task Create the array of <Card /> components
         */
        let cardComponents: JSX.Element[] = [];

        /**
         * @description Because cardsData is optional, we will need to check if the property exists
         */
        if (this.props.cardsData)
        {
            /**
             * @description We will use the build-in array function "map" to iterate over every object inside the cardsData array.
             *              This will return us a new array with the Card components ready to use
             */
            cardComponents = this.props.cardsData.map((cardData, cardIndex): JSX.Element => {

                /**
                 * @description Before creating the Card component, we will need to check if the 
                 *              name property exists inside cardData
                 */
                if (cardData.hasOwnProperty('id') && cardData.hasOwnProperty('name'))
                {
                    /**
                     * @description Because we are returning an array of Cards, we will also need to supply a required React property "key" 
                     *              (any value that uniquely identifies each item within this array) so for now, we will use the array index.
                     * 
                     *              The card will be wrapped in a Draggable component and this component will take in a function that generates a JSX.Element.
                     *              This function is passed a provided object (generated by DragDropContext) which will be used to build our draggable card
                     * 
                     *              Due to library requirements, an additional div (the div is required by react-beautiful-dnd as it needs to 
                     *              target an HTMLElement, not a react component https://github.com/atlassian/react-beautiful-dnd/blob/master/docs/guides/using-inner-ref.md)
                     */
                    return (
                        <Draggable
                            draggableId={"card-" + cardData.id}
                            index={cardData.id}
                            key={cardData.id}
                        >
                            {(provided: DraggableProvided) => {
                                return (
                                    <div
                                        ref={provided.innerRef}
                                        {...provided.dragHandleProps}
                                        {...provided.draggableProps}
                                    >
                                        <Card 
                                            name={cardData.name}
                                        />
                                    </div>
                                )
                            }}
                            
                        </Draggable>
                    );
                }

            })
        }

        return (
            <div className="cardListComponent">
                <div className="cardListName">
                    { this.props.name }
                </div>
{{partial_4}}                >
{{partial_5}}
{{partial_6}}            </div>
        );
    }

}

export default CardList;
